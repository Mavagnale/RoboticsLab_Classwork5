#include "ros/ros.h"
#include "boost/thread.hpp"
#include "geometry_msgs/Pose.h"
#include "sensor_msgs/JointState.h"
#include <std_msgs/Float64.h>
#include <fstream>

//Include KDL libraries
#include <kdl_parser/kdl_parser.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <kdl/chainiksolvervel_pinv.hpp>
#include <kdl/chainiksolverpos_nr.hpp>

using namespace std;


class KUKA_INVKIN {
	public:
		KUKA_INVKIN();

		//From the run method we will start all the threads needed to accomplish the task
		void run();
		//Function to load the model from the URDF file (parameter server)
		bool init_robot_model();
		//Function to retrieve the pose of the end-effector using KDL
		void get_dirkin();
		//Callback for the /joint_state message to retrieve the value of the joints
		void joint_states_cb( sensor_msgs::JointState );
		//Joint space positioning to set an initial position
		void goto_initial_position( float dp[7] );
		//Main control loop function
		void ctrl_loop();

		void init_trajectory();
		
	private:
		ros::NodeHandle _nh;

		//Kinematic chain
		KDL::Chain _k_chain;
		//Kinematic tree
		KDL::Tree iiwa_tree;
	
		//Forward kinematics solver
		KDL::ChainFkSolverPos_recursive *_fksolver; 	
		//Implementation of a inverse velocity kinematics algorithm based on 
		//the generalize pseudo inverse to calculate the velocity transformation 
		//from Cartesian to joint space of a general KDL::Chain
		KDL::ChainIkSolverVel_pinv *_ik_solver_vel;   	//Inverse velocity solver
		
		//Implementation of a general inverse position kinematics algorithm based on Newton-Raphson 
		//iterations to calculate the position transformation from Cartesian 
		//to joint space of a general KDL::Chain. 
		KDL::ChainIkSolverPos_NR *_ik_solver_pos;

		ros::Subscriber _js_sub;
		ros::Publisher _cartpose_pub;
		ros::Publisher _cmd_pub[7];
	
		//Variable to store the joint configuration
		KDL::JntArray *_q_in;
		//Variable to store the end effector pose
		KDL::Frame _p_out;

		//Control flags to check 
		//that data have been received
		bool _first_js;
		bool _first_fk;
	
		double _trajectory[3003]; 


};

KUKA_INVKIN::KUKA_INVKIN() : _trajectory {0.3,0,0.8,
0.3,0.0, 0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.00012563,0.8,
0.3,0.00014631,0.8,
0.3,0.00016911,0.8,
0.3,0.00019414,0.8,
0.3,0.0002215,0.8,
0.3,0.00025129,0.8,
0.3,0.00028359,0.8,
0.3,0.00031851,0.8,
0.3,0.00035615,0.8,
0.3,0.0003966,0.8,
0.3,0.00043996,0.8,
0.3,0.00048631,0.8,
0.3,0.00053576,0.8,
0.3,0.00058839,0.8,
0.3,0.00064431,0.8,
0.3,0.00070359,0.8,
0.3,0.00076634,0.8,
0.3,0.00083264,0.8,
0.3,0.00090258,0.8,
0.3,0.00097625,0.8,
0.3,0.0010537,0.8,
0.3,0.0011351,0.8,
0.3,0.0012205,0.8,
0.3,0.00131,0.8,
0.3,0.0014037,0.8,
0.3,0.0015016,0.8,
0.3,0.0016038,0.8,
0.3,0.0017105,0.8,
0.29999,0.0018216,0.8,
0.29999,0.0019374,0.8,
0.29999,0.0020578,0.8,
0.29999,0.002183,0.8,
0.29999,0.002313,0.8,
0.29999,0.0024479,0.8,
0.29999,0.0025879,0.8,
0.29999,0.0027329,0.8,
0.29999,0.002883,0.8,
0.29998,0.0030384,0.8,
0.29998,0.0031991,0.8,
0.29998,0.0033652,0.8,
0.29998,0.0035367,0.8,
0.29998,0.0037138,0.8,
0.29997,0.0038965,0.8,
0.29997,0.0040848,0.8,
0.29997,0.0042789,0.8,
0.29997,0.0044789,0.8,
0.29996,0.0046848,0.8,
0.29996,0.0048966,0.8,
0.29996,0.0051145,0.8,
0.29995,0.0053385,0.8,
0.29995,0.0055687,0.8,
0.29994,0.0058052,0.8,
0.29994,0.006048,0.8,
0.29993,0.0062971,0.8,
0.29993,0.0065528,0.8,
0.29992,0.006815,0.8,
0.29992,0.0070837,0.8,
0.29991,0.0073591,0.8,
0.2999,0.0076413,0.8,
0.2999,0.0079302,0.8,
0.29989,0.008226,0.8,
0.29988,0.0085288,0.8,
0.29987,0.0088385,0.8,
0.29986,0.0091552,0.8,
0.29985,0.0094791,0.8,
0.29984,0.0098101,0.8,
0.29983,0.010148,0.8,
0.29982,0.010494,0.8,
0.2998,0.010847,0.8,
0.29979,0.011207,0.8,
0.29978,0.011575,0.8,
0.29976,0.01195,0.8,
0.29975,0.012333,0.8,
0.29973,0.012723,0.8,
0.29971,0.013121,0.8,
0.29969,0.013527,0.8,
0.29968,0.013941,0.8,
0.29966,0.014362,0.8,
0.29964,0.014791,0.8,
0.29961,0.015229,0.8,
0.29959,0.015674,0.8,
0.29957,0.016127,0.8,
0.29954,0.016589,0.8,
0.29951,0.017058,0.8,
0.29949,0.017536,0.8,
0.29946,0.018022,0.8,
0.29943,0.018517,0.8,
0.2994,0.019019,0.8,
0.29936,0.01953,0.8,
0.29933,0.02005,0.8,
0.29929,0.020577,0.8,
0.29926,0.021114,0.8,
0.29922,0.021659,0.8,
0.29918,0.022212,0.8,
0.29913,0.022774,0.8,
0.29909,0.023345,0.8,
0.29904,0.023925,0.8,
0.299,0.024513,0.8,
0.29895,0.02511,0.8,
0.2989,0.025716,0.8,
0.29884,0.026331,0.8,
0.29879,0.026954,0.8,
0.29873,0.027587,0.8,
0.29867,0.028228,0.8,
0.29861,0.028879,0.8,
0.29854,0.029538,0.8,
0.29848,0.030206,0.8,
0.29841,0.030884,0.8,
0.29833,0.031571,0.8,
0.29826,0.032267,0.8,
0.29818,0.032972,0.8,
0.2981,0.033686,0.8,
0.29802,0.034409,0.8,
0.29793,0.035142,0.8,
0.29785,0.035884,0.8,
0.29775,0.036635,0.8,
0.29766,0.037395,0.8,
0.29756,0.038165,0.8,
0.29746,0.038944,0.8,
0.29736,0.039733,0.8,
0.29725,0.04053,0.8,
0.29714,0.041338,0.8,
0.29702,0.042154,0.8,
0.29691,0.04298,0.8,
0.29678,0.043816,0.8,
0.29666,0.044661,0.8,
0.29653,0.045515,0.8,
0.29639,0.046379,0.8,
0.29626,0.047252,0.8,
0.29611,0.048135,0.8,
0.29597,0.049027,0.8,
0.29582,0.049929,0.8,
0.29566,0.05084,0.8,
0.2955,0.051761,0.8,
0.29534,0.052691,0.8,
0.29517,0.05363,0.8,
0.29499,0.05458,0.8,
0.29481,0.055538,0.8,
0.29463,0.056506,0.8,
0.29444,0.057484,0.8,
0.29425,0.058471,0.8,
0.29405,0.059467,0.8,
0.29384,0.060473,0.8,
0.29363,0.061489,0.8,
0.29341,0.062513,0.8,
0.29319,0.063547,0.8,
0.29296,0.064591,0.8,
0.29273,0.065644,0.8,
0.29249,0.066706,0.8,
0.29224,0.067778,0.8,
0.29199,0.068859,0.8,
0.29173,0.069949,0.8,
0.29147,0.071048,0.8,
0.29119,0.072157,0.8,
0.29091,0.073275,0.8,
0.29063,0.074402,0.8,
0.29033,0.075538,0.8,
0.29003,0.076683,0.8,
0.28973,0.077838,0.8,
0.28941,0.079001,0.8,
0.28909,0.080173,0.8,
0.28876,0.081355,0.8,
0.28842,0.082545,0.8,
0.28807,0.083744,0.8,
0.28772,0.084952,0.8,
0.28736,0.086169,0.8,
0.28699,0.087394,0.8,
0.28661,0.088628,0.8,
0.28622,0.089871,0.8,
0.28583,0.091122,0.8,
0.28542,0.092382,0.8,
0.28501,0.09365,0.8,
0.28459,0.094927,0.8,
0.28415,0.096212,0.8,
0.28371,0.097505,0.8,
0.28326,0.098806,0.8,
0.2828,0.10012,0.8,
0.28233,0.10143,0.8,
0.28185,0.10276,0.8,
0.28136,0.10409,0.8,
0.28086,0.10543,0.8,
0.28035,0.10678,0.8,
0.27983,0.10814,0.8,
0.2793,0.1095,0.8,
0.27876,0.11088,0.8,
0.27821,0.11225,0.8,
0.27764,0.11364,0.8,
0.27707,0.11503,0.8,
0.27648,0.11644,0.8,
0.27589,0.11784,0.8,
0.27528,0.11926,0.8,
0.27466,0.12068,0.8,
0.27403,0.12211,0.8,
0.27338,0.12354,0.8,
0.27273,0.12498,0.8,
0.27206,0.12643,0.8,
0.27138,0.12789,0.8,
0.27068,0.12935,0.8,
0.26998,0.13081,0.8,
0.26926,0.13228,0.8,
0.26853,0.13376,0.8,
0.26778,0.13525,0.8,
0.26703,0.13673,0.8,
0.26626,0.13823,0.8,
0.26547,0.13973,0.8,
0.26468,0.14123,0.8,
0.26386,0.14274,0.8,
0.26304,0.14426,0.8,
0.2622,0.14578,0.8,
0.26135,0.1473,0.8,
0.26048,0.14883,0.8,
0.2596,0.15036,0.8,
0.2587,0.1519,0.8,
0.25779,0.15344,0.8,
0.25687,0.15498,0.8,
0.25592,0.15653,0.8,
0.25497,0.15808,0.8,
0.254,0.15964,0.8,
0.25301,0.1612,0.8,
0.25201,0.16276,0.8,
0.25099,0.16432,0.8,
0.24996,0.16589,0.8,
0.24891,0.16746,0.8,
0.24785,0.16903,0.8,
0.24677,0.1706,0.8,
0.24567,0.17218,0.8,
0.24456,0.17375,0.8,
0.24343,0.17533,0.8,
0.24229,0.17691,0.8,
0.24112,0.17849,0.8,
0.23995,0.18007,0.8,
0.23875,0.18165,0.8,
0.23754,0.18324,0.8,
0.23631,0.18482,0.8,
0.23506,0.1864,0.8,
0.2338,0.18798,0.8,
0.23252,0.18957,0.8,
0.23122,0.19115,0.8,
0.2299,0.19273,0.8,
0.22857,0.19431,0.8,
0.22722,0.19589,0.8,
0.22585,0.19746,0.8,
0.22446,0.19904,0.8,
0.22306,0.20061,0.8,
0.22164,0.20218,0.8,
0.2202,0.20375,0.8,
0.21874,0.20531,0.8,
0.21726,0.20688,0.8,
0.21576,0.20844,0.8,
0.21425,0.20999,0.8,
0.21272,0.21155,0.8,
0.21117,0.21309,0.8,
0.2096,0.21464,0.8,
0.20801,0.21618,0.8,
0.2064,0.21771,0.8,
0.20477,0.21924,0.8,
0.20313,0.22077,0.8,
0.20147,0.22229,0.8,
0.19978,0.2238,0.8,
0.19808,0.22531,0.8,
0.19636,0.22681,0.8,
0.19462,0.2283,0.8,
0.19286,0.22979,0.8,
0.19109,0.23127,0.8,
0.18929,0.23274,0.8,
0.18747,0.23421,0.8,
0.18564,0.23567,0.8,
0.18378,0.23711,0.8,
0.18191,0.23855,0.8,
0.18002,0.23999,0.8,
0.17811,0.24141,0.8,
0.17618,0.24282,0.8,
0.17423,0.24422,0.8,
0.17226,0.24562,0.8,
0.17027,0.247,0.8,
0.16826,0.24837,0.8,
0.16623,0.24973,0.8,
0.16419,0.25108,0.8,
0.16212,0.25242,0.8,
0.16004,0.25375,0.8,
0.15794,0.25506,0.8,
0.15582,0.25636,0.8,
0.15368,0.25765,0.8,
0.15152,0.25893,0.8,
0.14934,0.26019,0.8,
0.14714,0.26144,0.8,
0.14493,0.26267,0.8,
0.14269,0.26389,0.8,
0.14044,0.2651,0.8,
0.13817,0.26629,0.8,
0.13588,0.26746,0.8,
0.13357,0.26862,0.8,
0.13125,0.26977,0.8,
0.1289,0.2709,0.8,
0.12654,0.27201,0.8,
0.12416,0.2731,0.8,
0.12176,0.27418,0.8,
0.11935,0.27524,0.8,
0.11692,0.27628,0.8,
0.11447,0.2773,0.8,
0.112,0.27831,0.8,
0.10951,0.2793,0.8,
0.10701,0.28026,0.8,
0.1045,0.28121,0.8,
0.10196,0.28214,0.8,
0.099409,0.28305,0.8,
0.096842,0.28394,0.8,
0.094258,0.28481,0.8,
0.091658,0.28566,0.8,
0.089042,0.28648,0.8,
0.086411,0.28729,0.8,
0.083764,0.28807,0.8,
0.081102,0.28883,0.8,
0.078425,0.28957,0.8,
0.075733,0.29028,0.8,
0.073026,0.29098,0.8,
0.070305,0.29165,0.8,
0.06757,0.29229,0.8,
0.06482,0.29291,0.8,
0.062057,0.29351,0.8,
0.059281,0.29408,0.8,
0.056491,0.29463,0.8,
0.053687,0.29516,0.8,
0.050872,0.29566,0.8,
0.048043,0.29613,0.8,
0.045202,0.29658,0.8,
0.04235,0.297,0.8,
0.039485,0.29739,0.8,
0.036609,0.29776,0.8,
0.033722,0.2981,0.8,
0.030823,0.29841,0.8,
0.027915,0.2987,0.8,
0.024995,0.29896,0.8,
0.022066,0.29919,0.8,
0.019127,0.29939,0.8,
0.016179,0.29956,0.8,
0.013221,0.29971,0.8,
0.010255,0.29982,0.8,
0.0072804,0.29991,0.8,
0.0042975,0.29997,0.8,
0.0013068,0.3,0.8,
-0.0016914,0.3,0.8,
-0.0046967,0.29996,0.8,
-0.0077087,0.2999,0.8,
-0.010727,0.29981,0.8,
-0.013752,0.29968,0.8,
-0.016782,0.29953,0.8,
-0.019818,0.29934,0.8,
-0.022858,0.29913,0.8,
-0.025904,0.29888,0.8,
-0.028953,0.2986,0.8,
-0.032006,0.29829,0.8,
-0.035063,0.29794,0.8,
-0.038123,0.29757,0.8,
-0.041185,0.29716,0.8,
-0.04425,0.29672,0.8,
-0.047317,0.29625,0.8,
-0.050385,0.29574,0.8,
-0.053454,0.2952,0.8,
-0.056524,0.29463,0.8,
-0.059594,0.29402,0.8,
-0.062664,0.29338,0.8,
-0.065733,0.29271,0.8,
-0.068801,0.292,0.8,
-0.071868,0.29126,0.8,
-0.074933,0.29049,0.8,
-0.077995,0.28968,0.8,
-0.081055,0.28884,0.8,
-0.084112,0.28797,0.8,
-0.087165,0.28706,0.8,
-0.090213,0.28611,0.8,
-0.093258,0.28514,0.8,
-0.096297,0.28412,0.8,
-0.099331,0.28308,0.8,
-0.10236,0.282,0.8,
-0.10538,0.28088,0.8,
-0.1084,0.27973,0.8,
-0.1114,0.27855,0.8,
-0.1144,0.27733,0.8,
-0.11739,0.27608,0.8,
-0.12038,0.27479,0.8,
-0.12335,0.27347,0.8,
-0.12632,0.27211,0.8,
-0.12927,0.27072,0.8,
-0.13221,0.26929,0.8,
-0.13515,0.26783,0.8,
-0.13807,0.26634,0.8,
-0.14098,0.26481,0.8,
-0.14387,0.26325,0.8,
-0.14676,0.26165,0.8,
-0.14963,0.26002,0.8,
-0.15248,0.25836,0.8,
-0.15533,0.25666,0.8,
-0.15815,0.25493,0.8,
-0.16097,0.25316,0.8,
-0.16376,0.25136,0.8,
-0.16654,0.24953,0.8,
-0.16931,0.24766,0.8,
-0.17205,0.24576,0.8,
-0.17478,0.24383,0.8,
-0.17749,0.24186,0.8,
-0.18019,0.23986,0.8,
-0.18286,0.23783,0.8,
-0.18551,0.23576,0.8,
-0.18815,0.23367,0.8,
-0.19076,0.23154,0.8,
-0.19335,0.22938,0.8,
-0.19593,0.22719,0.8,
-0.19848,0.22496,0.8,
-0.201,0.22271,0.8,
-0.20351,0.22042,0.8,
-0.20599,0.2181,0.8,
-0.20845,0.21575,0.8,
-0.21088,0.21338,0.8,
-0.21329,0.21097,0.8,
-0.21567,0.20853,0.8,
-0.21803,0.20606,0.8,
-0.22037,0.20357,0.8,
-0.22267,0.20104,0.8,
-0.22495,0.19848,0.8,
-0.22721,0.1959,0.8,
-0.22943,0.19329,0.8,
-0.23163,0.19065,0.8,
-0.2338,0.18798,0.8,
-0.23594,0.18529,0.8,
-0.23805,0.18257,0.8,
-0.24014,0.17982,0.8,
-0.24219,0.17704,0.8,
-0.24421,0.17424,0.8,
-0.2462,0.17142,0.8,
-0.24816,0.16857,0.8,
-0.25009,0.16569,0.8,
-0.25199,0.16279,0.8,
-0.25385,0.15987,0.8,
-0.25569,0.15692,0.8,
-0.25749,0.15395,0.8,
-0.25925,0.15096,0.8,
-0.26099,0.14794,0.8,
-0.26268,0.1449,0.8,
-0.26435,0.14184,0.8,
-0.26598,0.13876,0.8,
-0.26757,0.13566,0.8,
-0.26913,0.13254,0.8,
-0.27066,0.1294,0.8,
-0.27215,0.12623,0.8,
-0.2736,0.12305,0.8,
-0.27502,0.11985,0.8,
-0.2764,0.11664,0.8,
-0.27774,0.1134,0.8,
-0.27905,0.11015,0.8,
-0.28031,0.10688,0.8,
-0.28155,0.1036,0.8,
-0.28274,0.1003,0.8,
-0.28389,0.09698,0.8,
-0.28501,0.093649,0.8,
-0.28609,0.090304,0.8,
-0.28712,0.086945,0.8,
-0.28812,0.083572,0.8,
-0.28908,0.080187,0.8,
-0.29001,0.07679,0.8,
-0.29089,0.073381,0.8,
-0.29173,0.06996,0.8,
-0.29253,0.066529,0.8,
-0.29329,0.063088,0.8,
-0.29401,0.059637,0.8,
-0.29469,0.056176,0.8,
-0.29533,0.052708,0.8,
-0.29593,0.049231,0.8,
-0.29649,0.045746,0.8,
-0.29701,0.042254,0.8,
-0.29749,0.038756,0.8,
-0.29792,0.035252,0.8,
-0.29832,0.031742,0.8,
-0.29867,0.028228,0.8,
-0.29898,0.024709,0.8,
-0.29925,0.021186,0.8,
-0.29948,0.01766,0.8,
-0.29967,0.014131,0.8,
-0.29981,0.0106,0.8,
-0.29992,0.0070679,0.8,
-0.29998,0.0035342,0.8,
-0.3,3.6739e-17,0.8,
-0.29998,-0.0035342,0.8,
-0.29992,-0.0070679,0.8,
-0.29981,-0.0106,0.8,
-0.29967,-0.014131,0.8,
-0.29948,-0.01766,0.8,
-0.29925,-0.021186,0.8,
-0.29898,-0.024709,0.8,
-0.29867,-0.028228,0.8,
-0.29832,-0.031742,0.8,
-0.29792,-0.035252,0.8,
-0.29749,-0.038756,0.8,
-0.29701,-0.042254,0.8,
-0.29649,-0.045746,0.8,
-0.29593,-0.049231,0.8,
-0.29533,-0.052708,0.8,
-0.29469,-0.056176,0.8,
-0.29401,-0.059637,0.8,
-0.29329,-0.063088,0.8,
-0.29253,-0.066529,0.8,
-0.29173,-0.06996,0.8,
-0.29089,-0.073381,0.8,
-0.29001,-0.07679,0.8,
-0.28908,-0.080187,0.8,
-0.28812,-0.083572,0.8,
-0.28712,-0.086945,0.8,
-0.28609,-0.090304,0.8,
-0.28501,-0.093649,0.8,
-0.28389,-0.09698,0.8,
-0.28274,-0.1003,0.8,
-0.28155,-0.1036,0.8,
-0.28031,-0.10688,0.8,
-0.27905,-0.11015,0.8,
-0.27774,-0.1134,0.8,
-0.2764,-0.11664,0.8,
-0.27502,-0.11985,0.8,
-0.2736,-0.12305,0.8,
-0.27215,-0.12623,0.8,
-0.27066,-0.1294,0.8,
-0.26913,-0.13254,0.8,
-0.26757,-0.13566,0.8,
-0.26598,-0.13876,0.8,
-0.26435,-0.14184,0.8,
-0.26268,-0.1449,0.8,
-0.26099,-0.14794,0.8,
-0.25925,-0.15096,0.8,
-0.25749,-0.15395,0.8,
-0.25569,-0.15692,0.8,
-0.25385,-0.15987,0.8,
-0.25199,-0.16279,0.8,
-0.25009,-0.16569,0.8,
-0.24816,-0.16857,0.8,
-0.2462,-0.17142,0.8,
-0.24421,-0.17424,0.8,
-0.24219,-0.17704,0.8,
-0.24014,-0.17982,0.8,
-0.23805,-0.18257,0.8,
-0.23594,-0.18529,0.8,
-0.2338,-0.18798,0.8,
-0.23163,-0.19065,0.8,
-0.22943,-0.19329,0.8,
-0.22721,-0.1959,0.8,
-0.22495,-0.19848,0.8,
-0.22267,-0.20104,0.8,
-0.22037,-0.20357,0.8,
-0.21803,-0.20606,0.8,
-0.21567,-0.20853,0.8,
-0.21329,-0.21097,0.8,
-0.21088,-0.21338,0.8,
-0.20845,-0.21575,0.8,
-0.20599,-0.2181,0.8,
-0.20351,-0.22042,0.8,
-0.201,-0.22271,0.8,
-0.19848,-0.22496,0.8,
-0.19593,-0.22719,0.8,
-0.19335,-0.22938,0.8,
-0.19076,-0.23154,0.8,
-0.18815,-0.23367,0.8,
-0.18551,-0.23576,0.8,
-0.18286,-0.23783,0.8,
-0.18019,-0.23986,0.8,
-0.17749,-0.24186,0.8,
-0.17478,-0.24383,0.8,
-0.17205,-0.24576,0.8,
-0.16931,-0.24766,0.8,
-0.16654,-0.24953,0.8,
-0.16376,-0.25136,0.8,
-0.16097,-0.25316,0.8,
-0.15815,-0.25493,0.8,
-0.15533,-0.25666,0.8,
-0.15248,-0.25836,0.8,
-0.14963,-0.26002,0.8,
-0.14676,-0.26165,0.8,
-0.14387,-0.26325,0.8,
-0.14098,-0.26481,0.8,
-0.13807,-0.26634,0.8,
-0.13515,-0.26783,0.8,
-0.13221,-0.26929,0.8,
-0.12927,-0.27072,0.8,
-0.12632,-0.27211,0.8,
-0.12335,-0.27347,0.8,
-0.12038,-0.27479,0.8,
-0.11739,-0.27608,0.8,
-0.1144,-0.27733,0.8,
-0.1114,-0.27855,0.8,
-0.1084,-0.27973,0.8,
-0.10538,-0.28088,0.8,
-0.10236,-0.282,0.8,
-0.099331,-0.28308,0.8,
-0.096297,-0.28412,0.8,
-0.093258,-0.28514,0.8,
-0.090213,-0.28611,0.8,
-0.087165,-0.28706,0.8,
-0.084112,-0.28797,0.8,
-0.081055,-0.28884,0.8,
-0.077995,-0.28968,0.8,
-0.074933,-0.29049,0.8,
-0.071868,-0.29126,0.8,
-0.068801,-0.292,0.8,
-0.065733,-0.29271,0.8,
-0.062664,-0.29338,0.8,
-0.059594,-0.29402,0.8,
-0.056524,-0.29463,0.8,
-0.053454,-0.2952,0.8,
-0.050385,-0.29574,0.8,
-0.047317,-0.29625,0.8,
-0.04425,-0.29672,0.8,
-0.041185,-0.29716,0.8,
-0.038123,-0.29757,0.8,
-0.035063,-0.29794,0.8,
-0.032006,-0.29829,0.8,
-0.028953,-0.2986,0.8,
-0.025904,-0.29888,0.8,
-0.022858,-0.29913,0.8,
-0.019818,-0.29934,0.8,
-0.016782,-0.29953,0.8,
-0.013752,-0.29968,0.8,
-0.010727,-0.29981,0.8,
-0.0077087,-0.2999,0.8,
-0.0046967,-0.29996,0.8,
-0.0016914,-0.3,0.8,
0.0013068,-0.3,0.8,
0.0042975,-0.29997,0.8,
0.0072804,-0.29991,0.8,
0.010255,-0.29982,0.8,
0.013221,-0.29971,0.8,
0.016179,-0.29956,0.8,
0.019127,-0.29939,0.8,
0.022066,-0.29919,0.8,
0.024995,-0.29896,0.8,
0.027915,-0.2987,0.8,
0.030823,-0.29841,0.8,
0.033722,-0.2981,0.8,
0.036609,-0.29776,0.8,
0.039485,-0.29739,0.8,
0.04235,-0.297,0.8,
0.045202,-0.29658,0.8,
0.048043,-0.29613,0.8,
0.050872,-0.29566,0.8,
0.053687,-0.29516,0.8,
0.056491,-0.29463,0.8,
0.059281,-0.29408,0.8,
0.062057,-0.29351,0.8,
0.06482,-0.29291,0.8,
0.06757,-0.29229,0.8,
0.070305,-0.29165,0.8,
0.073026,-0.29098,0.8,
0.075733,-0.29028,0.8,
0.078425,-0.28957,0.8,
0.081102,-0.28883,0.8,
0.083764,-0.28807,0.8,
0.086411,-0.28729,0.8,
0.089042,-0.28648,0.8,
0.091658,-0.28566,0.8,
0.094258,-0.28481,0.8,
0.096842,-0.28394,0.8,
0.099409,-0.28305,0.8,
0.10196,-0.28214,0.8,
0.1045,-0.28121,0.8,
0.10701,-0.28026,0.8,
0.10951,-0.2793,0.8,
0.112,-0.27831,0.8,
0.11447,-0.2773,0.8,
0.11692,-0.27628,0.8,
0.11935,-0.27524,0.8,
0.12176,-0.27418,0.8,
0.12416,-0.2731,0.8,
0.12654,-0.27201,0.8,
0.1289,-0.2709,0.8,
0.13125,-0.26977,0.8,
0.13357,-0.26862,0.8,
0.13588,-0.26746,0.8,
0.13817,-0.26629,0.8,
0.14044,-0.2651,0.8,
0.14269,-0.26389,0.8,
0.14493,-0.26267,0.8,
0.14714,-0.26144,0.8,
0.14934,-0.26019,0.8,
0.15152,-0.25893,0.8,
0.15368,-0.25765,0.8,
0.15582,-0.25636,0.8,
0.15794,-0.25506,0.8,
0.16004,-0.25375,0.8,
0.16212,-0.25242,0.8,
0.16419,-0.25108,0.8,
0.16623,-0.24973,0.8,
0.16826,-0.24837,0.8,
0.17027,-0.247,0.8,
0.17226,-0.24562,0.8,
0.17423,-0.24422,0.8,
0.17618,-0.24282,0.8,
0.17811,-0.24141,0.8,
0.18002,-0.23999,0.8,
0.18191,-0.23855,0.8,
0.18378,-0.23711,0.8,
0.18564,-0.23567,0.8,
0.18747,-0.23421,0.8,
0.18929,-0.23274,0.8,
0.19109,-0.23127,0.8,
0.19286,-0.22979,0.8,
0.19462,-0.2283,0.8,
0.19636,-0.22681,0.8,
0.19808,-0.22531,0.8,
0.19978,-0.2238,0.8,
0.20147,-0.22229,0.8,
0.20313,-0.22077,0.8,
0.20477,-0.21924,0.8,
0.2064,-0.21771,0.8,
0.20801,-0.21618,0.8,
0.2096,-0.21464,0.8,
0.21117,-0.21309,0.8,
0.21272,-0.21155,0.8,
0.21425,-0.20999,0.8,
0.21576,-0.20844,0.8,
0.21726,-0.20688,0.8,
0.21874,-0.20531,0.8,
0.2202,-0.20375,0.8,
0.22164,-0.20218,0.8,
0.22306,-0.20061,0.8,
0.22446,-0.19904,0.8,
0.22585,-0.19746,0.8,
0.22722,-0.19589,0.8,
0.22857,-0.19431,0.8,
0.2299,-0.19273,0.8,
0.23122,-0.19115,0.8,
0.23252,-0.18957,0.8,
0.2338,-0.18798,0.8,
0.23506,-0.1864,0.8,
0.23631,-0.18482,0.8,
0.23754,-0.18324,0.8,
0.23875,-0.18165,0.8,
0.23995,-0.18007,0.8,
0.24112,-0.17849,0.8,
0.24229,-0.17691,0.8,
0.24343,-0.17533,0.8,
0.24456,-0.17375,0.8,
0.24567,-0.17218,0.8,
0.24677,-0.1706,0.8,
0.24785,-0.16903,0.8,
0.24891,-0.16746,0.8,
0.24996,-0.16589,0.8,
0.25099,-0.16432,0.8,
0.25201,-0.16276,0.8,
0.25301,-0.1612,0.8,
0.254,-0.15964,0.8,
0.25497,-0.15808,0.8,
0.25592,-0.15653,0.8,
0.25687,-0.15498,0.8,
0.25779,-0.15344,0.8,
0.2587,-0.1519,0.8,
0.2596,-0.15036,0.8,
0.26048,-0.14883,0.8,
0.26135,-0.1473,0.8,
0.2622,-0.14578,0.8,
0.26304,-0.14426,0.8,
0.26386,-0.14274,0.8,
0.26468,-0.14123,0.8,
0.26547,-0.13973,0.8,
0.26626,-0.13823,0.8,
0.26703,-0.13673,0.8,
0.26778,-0.13525,0.8,
0.26853,-0.13376,0.8,
0.26926,-0.13228,0.8,
0.26998,-0.13081,0.8,
0.27068,-0.12935,0.8,
0.27138,-0.12789,0.8,
0.27206,-0.12643,0.8,
0.27273,-0.12498,0.8,
0.27338,-0.12354,0.8,
0.27403,-0.12211,0.8,
0.27466,-0.12068,0.8,
0.27528,-0.11926,0.8,
0.27589,-0.11784,0.8,
0.27648,-0.11644,0.8,
0.27707,-0.11503,0.8,
0.27764,-0.11364,0.8,
0.27821,-0.11225,0.8,
0.27876,-0.11088,0.8,
0.2793,-0.1095,0.8,
0.27983,-0.10814,0.8,
0.28035,-0.10678,0.8,
0.28086,-0.10543,0.8,
0.28136,-0.10409,0.8,
0.28185,-0.10276,0.8,
0.28233,-0.10143,0.8,
0.2828,-0.10012,0.8,
0.28326,-0.098806,0.8,
0.28371,-0.097505,0.8,
0.28415,-0.096212,0.8,
0.28459,-0.094927,0.8,
0.28501,-0.09365,0.8,
0.28542,-0.092382,0.8,
0.28583,-0.091122,0.8,
0.28622,-0.089871,0.8,
0.28661,-0.088628,0.8,
0.28699,-0.087394,0.8,
0.28736,-0.086169,0.8,
0.28772,-0.084952,0.8,
0.28807,-0.083744,0.8,
0.28842,-0.082545,0.8,
0.28876,-0.081355,0.8,
0.28909,-0.080173,0.8,
0.28941,-0.079001,0.8,
0.28973,-0.077838,0.8,
0.29003,-0.076683,0.8,
0.29033,-0.075538,0.8,
0.29063,-0.074402,0.8,
0.29091,-0.073275,0.8,
0.29119,-0.072157,0.8,
0.29147,-0.071048,0.8,
0.29173,-0.069949,0.8,
0.29199,-0.068859,0.8,
0.29224,-0.067778,0.8,
0.29249,-0.066706,0.8,
0.29273,-0.065644,0.8,
0.29296,-0.064591,0.8,
0.29319,-0.063547,0.8,
0.29341,-0.062513,0.8,
0.29363,-0.061489,0.8,
0.29384,-0.060473,0.8,
0.29405,-0.059467,0.8,
0.29425,-0.058471,0.8,
0.29444,-0.057484,0.8,
0.29463,-0.056506,0.8,
0.29481,-0.055538,0.8,
0.29499,-0.05458,0.8,
0.29517,-0.05363,0.8,
0.29534,-0.052691,0.8,
0.2955,-0.051761,0.8,
0.29566,-0.05084,0.8,
0.29582,-0.049929,0.8,
0.29597,-0.049027,0.8,
0.29611,-0.048135,0.8,
0.29626,-0.047252,0.8,
0.29639,-0.046379,0.8,
0.29653,-0.045515,0.8,
0.29666,-0.044661,0.8,
0.29678,-0.043816,0.8,
0.29691,-0.04298,0.8,
0.29702,-0.042154,0.8,
0.29714,-0.041338,0.8,
0.29725,-0.04053,0.8,
0.29736,-0.039733,0.8,
0.29746,-0.038944,0.8,
0.29756,-0.038165,0.8,
0.29766,-0.037395,0.8,
0.29775,-0.036635,0.8,
0.29785,-0.035884,0.8,
0.29793,-0.035142,0.8,
0.29802,-0.034409,0.8,
0.2981,-0.033686,0.8,
0.29818,-0.032972,0.8,
0.29826,-0.032267,0.8,
0.29833,-0.031571,0.8,
0.29841,-0.030884,0.8,
0.29848,-0.030206,0.8,
0.29854,-0.029538,0.8,
0.29861,-0.028879,0.8,
0.29867,-0.028228,0.8,
0.29873,-0.027587,0.8,
0.29879,-0.026954,0.8,
0.29884,-0.026331,0.8,
0.2989,-0.025716,0.8,
0.29895,-0.02511,0.8,
0.299,-0.024513,0.8,
0.29904,-0.023925,0.8,
0.29909,-0.023345,0.8,
0.29913,-0.022774,0.8,
0.29918,-0.022212,0.8,
0.29922,-0.021659,0.8,
0.29926,-0.021114,0.8,
0.29929,-0.020577,0.8,
0.29933,-0.02005,0.8,
0.29936,-0.01953,0.8,
0.2994,-0.019019,0.8,
0.29943,-0.018517,0.8,
0.29946,-0.018022,0.8,
0.29949,-0.017536,0.8,
0.29951,-0.017058,0.8,
0.29954,-0.016589,0.8,
0.29957,-0.016127,0.8,
0.29959,-0.015674,0.8,
0.29961,-0.015229,0.8,
0.29964,-0.014791,0.8,
0.29966,-0.014362,0.8,
0.29968,-0.013941,0.8,
0.29969,-0.013527,0.8,
0.29971,-0.013121,0.8,
0.29973,-0.012723,0.8,
0.29975,-0.012333,0.8,
0.29976,-0.01195,0.8,
0.29978,-0.011575,0.8,
0.29979,-0.011207,0.8,
0.2998,-0.010847,0.8,
0.29982,-0.010494,0.8,
0.29983,-0.010148,0.8,
0.29984,-0.0098101,0.8,
0.29985,-0.0094791,0.8,
0.29986,-0.0091552,0.8,
0.29987,-0.0088385,0.8,
0.29988,-0.0085288,0.8,
0.29989,-0.008226,0.8,
0.2999,-0.0079302,0.8,
0.2999,-0.0076413,0.8,
0.29991,-0.0073591,0.8,
0.29992,-0.0070837,0.8,
0.29992,-0.006815,0.8,
0.29993,-0.0065528,0.8,
0.29993,-0.0062971,0.8,
0.29994,-0.006048,0.8,
0.29994,-0.0058052,0.8,
0.29995,-0.0055687,0.8,
0.29995,-0.0053385,0.8,
0.29996,-0.0051145,0.8,
0.29996,-0.0048966,0.8,
0.29996,-0.0046848,0.8,
0.29997,-0.0044789,0.8,
0.29997,-0.0042789,0.8,
0.29997,-0.0040848,0.8,
0.29997,-0.0038965,0.8,
0.29998,-0.0037138,0.8,
0.29998,-0.0035367,0.8,
0.29998,-0.0033652,0.8,
0.29998,-0.0031991,0.8,
0.29998,-0.0030384,0.8,
0.29999,-0.002883,0.8,
0.29999,-0.0027329,0.8,
0.29999,-0.0025879,0.8,
0.29999,-0.0024479,0.8,
0.29999,-0.002313,0.8,
0.29999,-0.002183,0.8,
0.29999,-0.0020578,0.8,
0.29999,-0.0019374,0.8,
0.29999,-0.0018216,0.8,
0.3,-0.0017105,0.8,
0.3,-0.0016038,0.8,
0.3,-0.0015016,0.8,
0.3,-0.0014037,0.8,
0.3,-0.00131,0.8,
0.3,-0.0012205,0.8,
0.3,-0.0011351,0.8,
0.3,-0.0010537,0.8,
0.3,-0.00097625,0.8,
0.3,-0.00090258,0.8,
0.3,-0.00083264,0.8,
0.3,-0.00076634,0.8,
0.3,-0.00070359,0.8,
0.3,-0.00064431,0.8,
0.3,-0.00058839,0.8,
0.3,-0.00053576,0.8,
0.3,-0.00048631,0.8,
0.3,-0.00043996,0.8,
0.3,-0.0003966,0.8,
0.3,-0.00035615,0.8,
0.3,-0.00031851,0.8,
0.3,-0.00028359,0.8,
0.3,-0.00025129,0.8,
0.3,-0.0002215,0.8,
0.3,-0.00019414,0.8,
0.3,-0.00016911,0.8,
0.3,-0.00014631,0.8,
0.3,-0.00012563,0.8,
0.3,-0.00010698,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8,
0.3,0.0,0.8
}{

	//If the robot motdel is not correctly loaded, exit from the program
	if (!init_robot_model()) 
		exit(1); 
	ROS_INFO("Robot tree correctly loaded from parameter server!");

	//Get some output from the kinemtic object: number of joints and links
	cout << "Joints and segments: " << iiwa_tree.getNrOfJoints() << " - " << iiwa_tree.getNrOfSegments() << endl;
 
	//Input: the current configuration of the robot (its joints value)
	_js_sub = _nh.subscribe("/lbr_iiwa/joint_states", 0, &KUKA_INVKIN::joint_states_cb, this);
	
	//Output: the cartesian position of the end-effector
	_cartpose_pub = _nh.advertise<geometry_msgs::Pose>("/lbr_iiwa/eef_pose", 0);
	//Output: the command to the robot joints
	_cmd_pub[0] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint1_position_controller/command", 1);
	_cmd_pub[1] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint2_position_controller/command", 1);
	_cmd_pub[2] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint3_position_controller/command", 1);
	_cmd_pub[3] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint4_position_controller/command", 1);
	_cmd_pub[4] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint5_position_controller/command", 1);
	_cmd_pub[5] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint6_position_controller/command", 1);
	_cmd_pub[6] = _nh.advertise< std_msgs::Float64 > ("/lbr_iiwa/joint7_position_controller/command", 1);



	init_trajectory();
	//Set the control flags to false
	_first_js = false;
	_first_fk = false;
}


void KUKA_INVKIN::init_trajectory(){
		cout<<"Inizializza traiettoria"<<endl; //debug
	/*	for (unsigned int i = 0; i < 3003; i++) {
				cout << _trajectory[i] << endl;
		}
	*/
		
}


bool KUKA_INVKIN::init_robot_model() {

	//Retrieve the robot description (URDF) from the robot_description param
	std::string robot_desc_string;
	_nh.param("robot_description", robot_desc_string, std::string());
	
	//Use the treeFromString function to convert the robot model into a kinematic tree 
	if (!kdl_parser::treeFromString(robot_desc_string, iiwa_tree)){
		ROS_ERROR("Failed to construct kdl tree");
		return false;
	}

	//Define the links of the desired chain base_link -> tip_link
	std::string base_link = "lbr_iiwa_link_0";
	std::string tip_link  = "lbr_iiwa_link_7";
	if ( !iiwa_tree.getChain(base_link, tip_link, _k_chain) ) return false;

	//Initialize the solvers
	//Solvers are declared as pointer in the class definition
	//Here we instantiate the solvers on the desired kinematic chain
	_fksolver = new KDL::ChainFkSolverPos_recursive( _k_chain );
	_ik_solver_vel = new KDL::ChainIkSolverVel_pinv( _k_chain );
	//The invers kinematic solver object needs must be initialized considering also
	//the number of iterations to solve the ik problem on a given robot configuration
	//and the allowed error on the joint positioning 
	_ik_solver_pos = new KDL::ChainIkSolverPos_NR( _k_chain, *_fksolver, *_ik_solver_vel, 100, 1e-6 );

	//The _q_in is the vetor where the values of the joints at a current time
	//are saved. Also this variable is a pointer
	//Must be instantiated before its usage 
	_q_in = new KDL::JntArray( _k_chain.getNrOfJoints() );


	return true;
}


//Callback for the joint state
void KUKA_INVKIN::joint_states_cb( sensor_msgs::JointState js ) {

	//We assume to know the number of joints
	for(int i=0; i<7; i++ ) 
		_q_in->data[i] = js.position[i];

	//We can start the calculation of the fw kinematic
	//We know that the first joint value set is arrived
	_first_js = true;
}

//Initial robot positioning
//Command the initial velue until that value has not been reached
//	If the robot is controlled in position, the inner loop of the acutator 
//	will assure that the value will be reached in a smooth way
void KUKA_INVKIN::goto_initial_position( float dp[7] ) {
	
	ros::Rate r(10);

	float min_e = 1000.0;
	float max_e = 1000.0;

	std_msgs::Float64 cmd[7];

	//While the maximum error over all the joints is higher than a given threshold 
	while( max_e > 0.002 ) {
 		max_e = -1000;
		//Command the same value for all the joints and calculate the maximum error
		for(int i=0; i<7; i++) {
 			cmd[i].data = dp[i];
			_cmd_pub[i].publish (cmd[i]);
			float e = fabs( cmd[i].data - _q_in->data[i] );
			//max_e is the maximum error over all the joints
			max_e = ( e > max_e ) ? e : max_e;
		}
		r.sleep();
	}

	sleep(2);
}


void KUKA_INVKIN::get_dirkin() {

	ros::Rate r(100);

	KDL::JntArray q_curr(_k_chain.getNrOfJoints());

	//Wait the first Joint state message
	//	Without the first joint value
	//	is not useful to calculate the Fk
	while( !_first_js ) usleep(0.1);

	//Output message to publish the pose of the end effector
	geometry_msgs::Pose cpose;

	while(ros::ok()) {

		//JntToCart: Joint values to Cartesian space
		//	First argument: the current value of the robot joints
		//	Second argument: the calculated pose of the end effector
		_fksolver->JntToCart(*_q_in, _p_out);


		double qx, qy, qz, qw;

		cpose.position.x = _p_out.p.x();
		cpose.position.y = _p_out.p.y();
		cpose.position.z = _p_out.p.z();

		//In KDL the p_out is a KDL::Frame data
		//	The orientation is reported in the rotation matrix form
		//	We can convert into quaternion
		_p_out.M.GetQuaternion( qx, qy, qz, qw);
		cpose.orientation.w = qw;
		cpose.orientation.x = qx;
		cpose.orientation.y = qy;
		cpose.orientation.x = qz;

		_cartpose_pub.publish( cpose );		
	
		//Flag to true for the fk calculation (we can proceed with the ik solution)
		_first_fk = true;
	
		r.sleep();
	}
}



void KUKA_INVKIN::ctrl_loop() {
	
	//Wait until the first fk has not been calculated
	while( !_first_fk ) usleep(0.1);


	//Control the robot towards a fixed initial position
	float i_cmd[7];
	i_cmd[0] = 1.0257930517926361;
	i_cmd[1] = -0.3631896968366237;
	i_cmd[2] = -0.7525777362763262;
	i_cmd[3] = -1.9281084308833814;
	i_cmd[4] = -0.2461669608408954;
	i_cmd[5] = -1.6549014058116684;
	i_cmd[6] = -0.32787693478512603;

	goto_initial_position( i_cmd );

	//F_dest is the target frame: where we want to bring the robot end effector 
	KDL::Frame F_dest;

	//q_out is the variable storing the output of the Inverse kinematic
	KDL::JntArray q_out(_k_chain.getNrOfJoints());


	//Lock the code to start manually the execution of the trajectory
		cout << "Press enter to start the trajectory execution" << endl;
		string ln;
		getline(cin, ln);

	while(ros::ok()){
	for(int j = 0 ; j < 1001 ; j++){
		//Generate the goal position
		//	Starting from the current position (_p_out) 
		//		command the data with an offset
		F_dest.p.data[0] = _trajectory[3*j];
		F_dest.p.data[1] = _trajectory[3*j+1];
		F_dest.p.data[2] = _trajectory[3*j+2];

		//The orientation set point is the same of the current one
		KDL::Frame ident = KDL::Frame::Identity();
		for(int i=0; i<9; i++ ){
//			F_dest.M.data[i] = _p_out.M.data[i];
			F_dest.M.data[i] = ident.M.data[i];
		}


		std_msgs::Float64 cmd[7];

		//CartToJnt: transform the desired cartesian position into joint values
		if( _ik_solver_pos->CartToJnt(*_q_in, F_dest, q_out) != KDL::SolverI::E_NOERROR ) 
			cout << "failing in ik!" << endl;

		//Convert KDL output values into std_msgs::Float datatype
		for(int i=0; i<7; i++) {
			cmd[i].data = q_out.data[i];
		}

		//Publish all the commands in topics
		for(int i=0; i<7; i++) {
			_cmd_pub[i].publish (cmd[i]);
		}
		usleep(10000);
	}
	}
}


void KUKA_INVKIN::run() {

	//In the run method, we start the threads to:
	//	- Calculate the forward kinematic
	//	- Calculate the inverse kinematic 
	boost::thread get_dirkin_t( &KUKA_INVKIN::get_dirkin, this);
	boost::thread ctrl_loop_t ( &KUKA_INVKIN::ctrl_loop, this);
	ros::spin();	

}




int main(int argc, char** argv) {

	ros::init(argc, argv, "iiwa_kdl");
	KUKA_INVKIN ik;
	ik.run();

	return 0;
}
